// Copyright 2024 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use alloy_primitives::{FixedBytes, Sealable, U256};
use alloy_sol_types::SolValue;
use core::{APRCommitment, CometMainInterface, CONTRACT};
use risc0_steel::{
    config::ETH_MAINNET_CHAIN_SPEC,
    ethereum::{EthBlockHeader, EthViewCallInput},
    BlockCommitment, ViewCall,
};
use risc0_zkvm::guest::env::{self};

const SECONDS_PER_YEAR: u64 = 60 * 60 * 24 * 365;

// TODO remove inline block, just used for profiling
#[inline(never)]
fn hash_headers_upwards(
    headers: Vec<EthBlockHeader>,
    mut current_hash: FixedBytes<32>,
    mut current_height: u64,
) -> (FixedBytes<32>, u64) {
    for header in headers {
        assert_eq!(current_hash, header.parent_hash);
        current_hash = header.hash_slow();
        current_height = header.number;
    }

    (current_hash, current_height)
}

fn main() {
    // Read the input from the guest environment.
    let (input, block_headers): (EthViewCallInput, Vec<EthBlockHeader>) = env::read();

    // Converts the input into a `ViewCallEnv` for execution. The `with_chain_spec` method is used
    // to specify the chain configuration. It checks that the state matches the state root in the
    // header provided in the input.
    let mut view_call_env = input.into_env().with_chain_spec(&ETH_MAINNET_CHAIN_SPEC);

    // Execute the view call; it returns the result in the type generated by the `sol!` macro.
    let utilization = view_call_env
        .execute(ViewCall::new(CometMainInterface::getUtilizationCall {}, CONTRACT))
        ._0;
    let supply_rate: u64 = view_call_env
        .execute(ViewCall::new(CometMainInterface::getSupplyRateCall { utilization }, CONTRACT))
        ._0;

    // The formula for APR in percentage is the following:
    // Seconds Per Year = 60 * 60 * 24 * 365
    // Utilization = getUtilization()
    // Supply Rate = getSupplyRate(Utilization)
    // Supply APR = Supply Rate / (10 ^ 18) * Seconds Per Year * 100
    //
    // And this is calculating: Supply Rate * Seconds Per Year, to avoid float calculations for
    // precision.
    let annual_supply_rate = supply_rate * SECONDS_PER_YEAR;

    let old_commitment = view_call_env.block_commitment();

    // Prove the hash link from the block queried upwards.
    let (block_hash, block_num) = hash_headers_upwards(
        block_headers,
        old_commitment.blockHash,
        view_call_env.header().number,
    );

    let commitment = BlockCommitment { blockHash: block_hash, blockNumber: U256::from(block_num) };

    // This commits the APR at current utilization rate for this given block.
    env::commit_slice(
        &APRCommitment {
            commitment,
            annualSupplyRate: annual_supply_rate,
            queryHeight: old_commitment.blockNumber,
        }
        .abi_encode(),
    );
}
